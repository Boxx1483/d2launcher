#!/bin/bash
# https://github.com/murkl/d2launcher

script_title="Diablo II • Median XL • Standalone"

script_file=$(readlink -f "$0")
script_dir=$(dirname "$script_file")
script_id=$(basename "$script_file")
script_config_file="$script_dir/$script_id.conf"
script_res_dir="$script_dir/res"
script_icon_file="$script_res_dir/icon.png"
script_help_file="$script_res_dir/d2launcher-help.html"

# Config values
d2_binary_dir=""
d2_exec=""
d2_args=""

# Create config file
if [ ! -f "$script_config_file" ]; then
    {
        echo "d2_binary_dir=\"\""
        echo "d2_exec=\"Diablo II.exe\""
        echo "d2_args=\"-3dfx\""
    } >> "$script_config_file"
fi

# Import config file
. "$script_config_file"

# Desktop file
desktop_file_name="Diablo II"
desktop_file="$HOME/.local/share/applications/$script_id.desktop"

# Wine AppImage
wine_url="https://github.com/ferion11/Proton_Appimage/releases/download/continuous/proton-linux-x86-v4.2-PlayOnLinux-x86_64.AppImage"
wine="$script_res_dir/wine"
wineprefix="$script_dir/.wineprefix"
wine_user="steamuser"

# Local res files
d2_patch_res_file="$script_res_dir/d2-1.13c_files.zip"
glide_res_file="$script_res_dir/gl32ogl14e.zip"

# Patch files
patch_files_dir="$script_res_dir/patches"
patch_file_prefix="d2launcher-mxl"

# Diablo II
d2_vid_test_exe="D2VidTst.exe"
d2_glide_exe="glide-init.exe"

# Median XL
mxl_title="Median XL"
mxl_version_url="http://get.median-xl.com/launcher/?get=versions"
mxl_dlls_url="http://get.median-xl.com/launcher/?get=dlls"
mxl_mod_url="http://get.median-xl.com/launcher/?get=mod"

mxl_savegames_dir="$wineprefix/drive_c/users/$wine_user/Application Data/MedianXL"
mxl_savegames_prefix="$script_id-mxl-save"

# D2 Stats
d2_stats_url="https://github.com/Kyromyr/D2Stats/releases/download/3.11.0/D2Stats-3.11.0.rar"
d2_stats_res_dir="$script_res_dir/d2-stats"
d2_stats_exe="D2Stats.exe"
d2_sigma_loader_url="https://github.com/SyndromeDayna/diablo-2-median-xl-sigma-loader/releases/download/3/sigma-loader.exe"
d2_sigma_loader_exe="sigma-loader.exe"

log() {
	echo "$(date "+%H:%M:%S") $script_id: $1"
}

send_notify() {
    log "$1"
	notify-send -i "$script_icon_file" "$script_title" "$1"
}

# Check dependencies
if ! [ -x "$(command -v zenity)" ]; then
	send_notify "zenity not installed"
	exit 1;
fi
if ! [ -x "$(command -v 7z)" ]; then
	send_notify "p7zip not installed"
	exit 1;
fi
if ! [ -x "$(command -v unrar)" ]; then
	send_notify "unrar not installed"
	exit 1;
fi
if ! [ -x "$(command -v jq)" ]; then
	send_notify "jq not installed"
	exit 1;
fi
if ! [ -x "$(command -v wmctrl)" ]; then
	send_notify "wmctrl not installed"
	exit 1;
fi

zenity() {
	/usr/bin/zenity --name="$script_id" --title="$script_title" --window-icon="$script_icon_file" --height=130 --width=350 "$@" 2>/dev/null
}

show_zenity_info() {
    log "$1"
	zenity --info --text "$1"
}

show_zenity_error() {
    log "$1"
	zenity --error --text "$1"
}

check_d2_binary_dir() {
    if [ ! -d "$d2_binary_dir" ]; then
	    zenity --info --width=250 --text="Please choose Diablo II binary dir..."
	    directory=$(zenity --file-selection --directory)
	    if [ "$directory" != "" ]; then
            replace_config_file_value "d2_binary_dir" "$directory"
	    else
		    exit 1;
	    fi
    fi
}

check_wine_standalone() {
    if [ ! -f "$wine" ]; then
        zenity --question --text="Wine Standalone is required. Download now?"
        if [ $? = 1 ]; then
            exit 0;
        fi
        (
            install_wine
            echo "# Wine standalone successfully downloaded"
        ) | zenity --progress --text="Downloading Wine standalone" --auto-kill --pulsate
    fi
}

install_wine() {
    tmp_file="/tmp/wine.tmp"
    curl -Lk "$wine_url" -o "$tmp_file"
    mv "$tmp_file" "$wine"
    chmod +x "$wine"
}

check_glide_installation() {
    if [ ! -f "$d2_binary_dir/$d2_glide_exe" ]; then
        zenity --question --text="Glide Wrapper not installed. Install now?"
        if [ $? = 1 ]; then
            exit 0;
        fi
        (
	        install_glide
            echo "# Glide wrapper successfully installed"
        ) | zenity --progress --text="Installing Glide Wrapper" --auto-kill --pulsate
    fi
}

install_glide() {
	if [ ! -f "$glide_res_file" ]; then
		zenity_error "$glide_res_file not found!"
		exit 1;
	fi
    unzip -o "$glide_res_file" -d "$d2_binary_dir"
}

show_mxl_download_gui() {
	# Parse mxl patch infos
    latest_mxl_patch_json_file="/tmp/d2launcher_latest_mxl_patch.json"
    ( curl "$mxl_version_url" -s | jq -r '.mod | [.[] ] | .[-1]' > "$latest_mxl_patch_json_file" )| zenity --progress --text="Fetching latest $mxl_title version info" --pulsate --auto-close

	latest_mxl_patch_version=$(< "$latest_mxl_patch_json_file" jq -r '.name' | cut -f3 -d" ")
	latest_mxl_patch_prefix="$patch_file_prefix-$latest_mxl_patch_version"

	if [ "$latest_mxl_patch_version" = "" ]; then
		show_zenity_error "No connection to $mxl_title server"
		exit 1;
	fi

    # Check if new mxl version available
    if [ -f "$patch_files_dir/$latest_mxl_patch_prefix.zip" ]; then
        show_zenity_info "No updates available!\n\n$mxl_title $latest_mxl_patch_version patch file allready downloaded."
    else
        # Create tmp download dir
        tmp_dir="/tmp/$latest_mxl_patch_prefix"
        rm -f -r "$tmp_dir"
        mkdir -p "$tmp_dir"
        cd "$tmp_dir" || exit

        ( # Download latest Median XL patch
            echo "# Downloading $mxl_title $latest_mxl_patch_version dlls ..."
            curl "$mxl_dlls_url" -o "$tmp_dir/dlls.7z"

            echo "# Downloading $mxl_title $latest_mxl_patch_version mod ..."
            curl "$mxl_mod_url" -o "$tmp_dir/mod.7z"

            echo "# Extracting $mxl_title dll files ..."
            7z e "$tmp_dir/dlls.7z" -aoa
            rm -f "$tmp_dir/dlls.7z"

            echo "# Extracting $mxl_title mod files ..."
            7z e "$tmp_dir/mod.7z" -aoa
            rm -f "$tmp_dir/mod.7z"

            echo "# Creating $latest_mxl_patch_prefix patch ..."
            mkdir -p "$patch_files_dir"
            zip -r -0 "$patch_files_dir/$latest_mxl_patch_prefix.zip" .

            echo "# $mxl_title $latest_mxl_patch_version patch successfully downloaded"

        ) | zenity --progress --text="Downloading $mxl_title $latest_mxl_patch_version" --auto-kill --pulsate

        if [ "$?" = -1 ] ; then
	        show_zenity_error "Download error"
        fi
  fi
}

show_mxl_patch_gui() {
	if [ ! -d "$patch_files_dir" ]; then
		show_zenity_error "No local $mxl_title patches found!\n\nDownload latest $mxl_title patch first."
		exit 1;
	fi
	if [ ! -f "$d2_patch_res_file" ]; then
		show_zenity_error "$d2_patch_res_file not found!"
		exit 1;
	fi
	if [ ! -f "$glide_res_file" ]; then
		zenity_error "$glide_res_file not found!"
		exit 1;
	fi

    # List path files
    cd "$patch_files_dir" || exit
    patch_file_result=$( find . -maxdepth 1 -name '*.zip' -printf "%f\n" | sort -r | rev | cut -f 2- -d '.' | rev | zenity --list --hide-header --height=350 --ok-label="Patch" --cancel-label="Cancel" --text="<b>Choose $mxl_title patch to install</b>\n" --column="Available local patches" )

    if  [ $? = 0 ] && [ "$patch_file_result" != "" ]; then
        (
            patch_version=$(echo "$patch_file_result" | rev | cut -f 1 -d '-' | rev)

            echo "# Patching glide ..."
            install_glide

            echo "# Patching $d2_patch_res_file ..."
            unzip -o "$d2_patch_res_file" -d "$d2_binary_dir"

            echo "# Patching $patch_file_result.zip ..."
            unzip -o "$patch_files_dir/$patch_file_result.zip" -d "$d2_binary_dir"

            echo "$patch_version" > "$d2_binary_dir/$patch_file_prefix.version"
            echo "# $mxl_title $patch_version successfully patched"

        ) | zenity --progress --text="Patching $mxl_title" --auto-kill --pulsate

        if [ "$?" = -1 ] ; then
            show_zenity_error "Installation error"
        fi
    fi
}

show_help_gui() {
    zenity --text-info --width=500 --height=500 --html --filename="$script_help_file"
}

exec_diablo() {
	if [ ! -f "$d2_binary_dir/$d2_exec" ]; then
		show_zenity_error "$d2_binary_dir/$d2_exec not found"
		exit 1;
	fi

    if pgrep -x "$d2_stats_exe" >/dev/null; then
	    env WINEPREFIX="$wineprefix" "$wine" start /unix "$d2_binary_dir/$d2_sigma_loader_exe" "$d2_args"
    else
	    env WINEPREFIX="$wineprefix" "$wine" start /unix "$d2_binary_dir/$d2_exec" "$d2_args"
    fi
}

exec_d2_stats() {
    if [ ! -f "$d2_stats_res_dir/$d2_stats_exe" ]; then
        zenity --question --text="D2Stats is required. Download now?"
        if [ $? = 1 ]; then
            exit 0;
        fi
        (
            mkdir -p "$d2_stats_res_dir"
            cd "$d2_stats_res_dir" || exit
            rar_file=d2-stats.rar
            curl -Lk "$d2_stats_url" -o "$rar_file"
            unrar x "$rar_file"
            rm "$rar_file"
            echo "# D2Stats successfully downloaded"
        ) | zenity --progress --text="Downloading D2Stats" --auto-kill --pulsate
    fi
    
    if [ ! -f "$d2_binary_dir/$d2_sigma_loader_exe" ]; then
        zenity --question --text="$d2_sigma_loader_exe is required. Download now?"
        if [ $? = 1 ]; then
            exit 0;
        fi
        (
            curl -Lk "$d2_sigma_loader_url" -o "$d2_binary_dir/$d2_sigma_loader_exe"
            echo "# $d2_sigma_loader_exe successfully downloaded"
        ) | zenity --progress --text="Downloading $d2_sigma_loader_exe" --auto-kill --pulsate
    fi

	env WINEPREFIX="$wineprefix" "$wine" start /unix "$d2_stats_res_dir/$d2_stats_exe"
	
	# Workaround for disabling D2 Stats system tray
	for i in 1 2 3 4 5; do
	    sleep 1
        win_result=$(wmctrl -l | grep "Wine System Tray")
	    if [ "$win_result" != "" ]; then
	        wmctrl -c 'Wine System Tray'
	        log "Wine System Tray closed"
            break;
        fi
	done
}

exec_d2_video_settings() {
	if [ ! -f "$d2_binary_dir/$d2_vid_test_exe" ]; then
		show_zenity_error "$d2_binary_dir/$d2_vid_test_exe not found"
		exit 1;
	fi
	env WINEPREFIX="$wineprefix" "$wine" start /unix "$d2_binary_dir/$d2_vid_test_exe"
}

exec_glide_settings() {
    check_glide_installation
    env WINEPREFIX="$wineprefix" "$wine" start /unix "$d2_binary_dir/$d2_glide_exe"
}

show_edit_config() {
    result=$(zenity --text-info --height=400 --width=800 --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$script_config_file")
    if [ $? = 0 ]; then
        echo "$result" > "$script_config_file"
        send_notify "$script_config_file saved"
    fi
}

exec_export_data() {
    if [ ! -d "$mxl_savegames_dir" ]; then
	    show_zenity_error "$mxl_savegames_dir not found"
		exit 1;   
    fi
	directory=$(zenity --file-selection --directory)
	if [ "$directory" != "" ]; then
		filename="$mxl_savegames_prefix-$(date "+%Y-%m-%d-%H%M").zip"
		cd "$mxl_savegames_dir" || exit
		zip -r -0 "$directory/$filename" .
		show_zenity_info "Data successfully exported: $directory/$filename"
	fi
}

exec_import_data() {
	file=$(zenity --file-selection --file-filter="$mxl_savegames_prefix-*.zip")
	mkdir -p "$mxl_savegames_dir"
	if [ "$file" != "" ]; then
		unzip -o "$file" -d "$mxl_savegames_dir"
		show_zenity_info "$mxl_savegames_dir successfully imported"
	fi
}

replace_config_file_value() {
    key=$1
    value=$2
    sed -i "s#$key=.*#$key=\"$value\"#g" "$script_config_file"
    send_notify "$key was set to $value"
}

create_desktop_file() {
	rm -f "$desktop_file"
	{
	    echo "[Desktop Entry]"
	    echo "Name=$desktop_file_name"
	    echo "Icon=$script_icon_file"
	    echo "Exec=\"$script_file\""
	    echo "Type=Application"
	} >> "$desktop_file"
	chmod +x "$desktop_file"
	show_zenity_info "$desktop_file successfully created"
}

remove_desktop_file() {
	rm -f "$desktop_file"
	show_zenity_info "$desktop_file successfully removed"
}

# Main
while(true); do

    check_d2_binary_dir

    # Refresh config file
    . "$script_config_file"
    
    mxl_status="<b>$mxl_title not installed!</b>"
	d2_xml_version_file="$d2_binary_dir/$patch_file_prefix.version"

	if [ -f "$d2_xml_version_file" ]; then
		mxl_status="<b>Installed $mxl_title version:</b> $(cat "$d2_xml_version_file")"
	fi

	item_01="Diablo II"
	item_02="D2 Stats"
	item_03="Glide Settings"
	item_04="D2 Video Settings"
	item_05="Edit Config"
	item_06="Download $mxl_title"
	item_07="Install $mxl_title"
	item_08="Import Savegames"
	item_09="Export Savegames"
	if [ ! -f "$desktop_file" ]; then
		item_10="Create Icon"
	else
		item_10="Remove Icon"
	fi
	item_11="Help"

    # Show menu
    result=$(zenity --list --radiolist --height=350 --ok-label="Ok" --cancel-label="Exit" --text="$mxl_status\n" --hide-header --column="" --column="" TRUE "$item_01" FALSE "$item_02" FALSE "$item_03" FALSE "$item_04" FALSE "$item_05" FALSE "$item_06" FALSE "$item_07" FALSE "$item_08" FALSE "$item_09" FALSE "$item_10" FALSE "$item_11")

    # If user exit
    if [ $? = 1 ]; then
        break; exit 0;
    fi
    if [ "$result" = "$item_01" ]; then
        check_wine_standalone
        check_glide_installation
        exec_diablo
        exit 0;
    fi
    if [ "$result" = "$item_02" ]; then
        check_wine_standalone
        exec_d2_stats
    fi
    if [ "$result" = "$item_03" ]; then
        check_wine_standalone
        check_glide_installation
        exec_glide_settings
    fi
    if [ "$result" = "$item_04" ]; then
        check_wine_standalone
        exec_d2_video_settings
    fi
    if [ "$result" = "$item_05" ]; then
        show_edit_config
        # Refresh config file
        . "$script_config_file"
    fi
    if [ "$result" = "$item_06" ]; then
        show_mxl_download_gui
    fi
    if [ "$result" = "$item_07" ]; then
        show_mxl_patch_gui
    fi
    if [ "$result" = "$item_08" ]; then
        exec_import_data
    fi
    if [ "$result" = "$item_09" ]; then
        exec_export_data
    fi
    if [ "$result" = "$item_10" ]; then
        if [ ! -f "$desktop_file" ]; then
            create_desktop_file
        else
            remove_desktop_file
        fi
    fi
    if [ "$result" = "$item_11" ]; then
        show_help_gui
    fi
done
