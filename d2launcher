#!/bin/bash
# https://github.com/murkl/d2launcher
# https://developer.gnome.org/pygtk/stable/pango-markup-language.html

version=3.2.0

# Update
github_author=murkl
github_repo=d2launcher
github_tags_url="https://api.github.com/repos/$github_author/$github_repo/tags"
update_check=true

# Script
script_file=$(readlink -f "$0")
script_dir=$(dirname "$script_file")
script_id=$(basename "$script_file")

# Config file
script_config_file="$script_dir/$script_id.conf"

# Script resources
script_res_dir="$script_dir/res"
script_icon_file="$script_res_dir/icon.svg"
script_help_file="$script_res_dir/$script_id-help.html"

# Gui
gui_title="Diablo II • Median XL • Standalone"
gui_width=358
gui_height=258
gui_dialog_width=280
gui_dialog_height=140
gui_font="monospace"
gui_color="#87270A"
gui_size="8"
gui_dialog_font="monospace"
gui_dialog_color="#5D5D5D"
gui_dialog_size="8"

# Desktop file
desktop_file_name="Diablo II"
desktop_file="$HOME/.local/share/applications/$script_id.desktop"
desktop_icon=true

# Wine AppImage
wine4_url="https://github.com/ferion11/Wine_Appimage/releases/download/v4.21/wine-staging-linux-x86-v4.21-PlayOnLinux-x86_64.AppImage"
wine5_url="https://github.com/pawitp/wine-appimage/releases/download/v5.7/wine"
wine4="$script_res_dir/wine4.AppImage"
wine5="$script_res_dir/wine5.AppImage"
wineprefix="$script_dir/.wineprefix"
wine5_enabled=false
wine_default=""

# Patch files
patch_files_dir="$script_res_dir/patches"
patch_file_prefix="$script_id-mxl"

# Diablo II resources
d2_patch_res_file="$script_res_dir/d2-1.13c_files.zip"
glide_res_file="$script_res_dir/gl32ogl14e.zip"

# Diablo II binary
d2_binary_dir=""
d2_exe="Diablo II.exe"
d2_args="-3dfx"
d2_vid_test_exe="D2VidTst.exe"
d2_glide_exe="glide-init.exe"

# Median XL
mxl_title="Median XL"
mxl_version_url="http://get.median-xl.com/launcher/?get=versions"
mxl_dlls_url="http://get.median-xl.com/launcher/?get=dlls"
mxl_mod_url="http://get.median-xl.com/launcher/?get=mod"
mxl_version_file_name="$patch_file_prefix.version"
mxl_update_check=true

mxl_savegames_dir="$wineprefix/drive_c/users/$USER/Application Data/MedianXL"
mxl_savegames_prefix="$patch_file_prefix-save"

# D2 Stats
d2_stats_url="https://github.com/Kyromyr/D2Stats/releases/download/3.11.0/D2Stats-3.11.0.rar"
d2_sigma_loader_url="https://github.com/SyndromeDayna/diablo-2-median-xl-sigma-loader/releases/download/3/sigma-loader.exe"
d2_stats_res_dir="$script_res_dir/d2-stats"
d2_stats_exe="D2Stats.exe"
d2_sigma_loader_exe="sigma-loader.exe"

log() {
	echo "$(date "+%H:%M:%S") $script_id-$version: $*"
}

check_config_key() {
    config_key="$1"
    config_value="$2"
    if ! grep -qrnw "$script_config_file" -e "$config_key=*"; then
        echo "$config_key=\"$config_value\"" >> "$script_config_file"
        log "Added $config_key=$config_value to $script_config_file"
    fi
}

# Create new config file
if [ ! -f "$script_config_file" ]; then
    touch "$script_config_file"
    log "$script_config_file created"
fi

# Check and create config entries
check_config_key "d2_dir" "$d2_dir"
check_config_key "d2_exe" "$d2_exe"
check_config_key "d2_args" "$d2_args"
check_config_key "wine5_enabled" "$wine5_enabled"
check_config_key "gui_width" "$gui_width"
check_config_key "gui_height" "$gui_height"
check_config_key "desktop_icon" "$desktop_icon"
check_config_key "update_check" "$update_check"
check_config_key "mxl_update_check" "$mxl_update_check"

log "Config file used: $script_config_file"

# Import config file
. "$script_config_file"

send_notify() {
    log "$*"
	notify-send -i "$script_icon_file" "$gui_title" "$*"
}

# Check dependencies
if ! [ -x "$(command -v zenity)" ]; then
	send_notify "zenity not installed"
	exit 1;
fi
if ! [ -x "$(command -v curl)" ]; then
	send_notify "curl not installed"
	exit 1;
fi
if ! [ -x "$(command -v 7z)" ]; then
	send_notify "p7zip not installed"
	exit 1;
fi
if ! [ -x "$(command -v unrar)" ]; then
	send_notify "unrar not installed"
	exit 1;
fi
if ! [ -x "$(command -v jq)" ]; then
	send_notify "jq not installed"
	exit 1;
fi
if ! [ -x "$(command -v wmctrl)" ]; then
	send_notify "wmctrl not installed"
	exit 1;
fi

zenity() {
	/usr/bin/zenity --name="$script_id" --title="$gui_title" --window-icon="$script_icon_file" --width="$gui_width" --height="$gui_height" "$@" 2> /dev/null
}

show_zenity_dialog() {
    text="$1" && shift
    style='<span font_family="'$gui_dialog_font'" font="'$gui_dialog_size'" foreground="'$gui_dialog_color'">\n'$text'</span>'
	zenity --width="$gui_dialog_width" --height="$gui_dialog_height" --text="$style" "$@"
}

show_zenity_info() {
    text="$1" && shift
	show_zenity_dialog "<b>$text</b>" --info "$@" 
}

show_zenity_error() {
    text="$1" && shift
    show_zenity_dialog "<b>$text</b>" --error "$@" 
}

show_zenity_question() {
    text="$1" && shift
    show_zenity_dialog "$text" --question "$@" 
}

show_zenity_progress() {
    piped_pid="$1" && shift    
    text="$1" && shift
    tail -f /dev/null --pid "$piped_pid" | ( show_zenity_dialog "<b>$text</b>" --progress --pulsate --auto-close "$@" || (kill -9 $(list_children_pid "$piped_pid"); log "Progress PID killed: $piped_pid"; return 1) )
}

show_zenity_menu() {
    menu_text="$1" && shift
    cancel_button_text="$1" && shift
    ok_button_text="$1" && shift
    mxl_version_info_text="not installed"
	if [ -f "$d2_dir/$mxl_version_file_name" ]; then
        # Read installed Median XL version
		mxl_version_info_text=$(cat "$d2_dir/$mxl_version_file_name")
	fi
    text_1_styled='<span font_family="'$gui_font'" font="'$gui_size'" foreground="'$gui_color'">\t\t<b>D2LAUNCHER • MEDIAN XL</b></span>'
    text_2_styled='<span font_family="'$gui_font'" font="'$gui_size'" foreground="'$gui_dialog_color'">\t\t     <b>'$version' • '$mxl_version_info_text'</b></span>'
    text_3_styled='<span font_family="'$gui_font'" font="'$gui_size'" foreground="'$gui_dialog_color'"><b>'$menu_text'</b></span>'
    zenity --list --ok-label="$ok_button_text" --cancel-label="$cancel_button_text" --text="$text_1_styled\n$text_2_styled\n\n$text_3_styled" --hide-header --column="" "$@"
}

restart_script() {
    log "Restarting script..."
    "$script_file" &
    exit 0;
}

list_children_pid () {
    local children_pid
    children_pid=$(ps -o pid= --ppid "$1")
    for pid in $children_pid; do
        list_children_pid "$pid"
    done
    echo "$children_pid"
}

replace_config_file_value() {
    key=$1
    value=$2
    check_config_key "$key" "$value"
    sed -i "s#$key=.*#$key=\"$value\"#g" "$script_config_file"
    log "$key was set to $value"
}

create_desktop_file() {
    if [ ! -f "$desktop_file" ]; then
	    {
	        echo "[Desktop Entry]"
	        echo "Name=$desktop_file_name"
	        echo "Icon=$script_icon_file"
	        echo "Exec=\"$script_file\""
	        echo "Type=Application"
	    } >> "$desktop_file"
	    chmod +x "$desktop_file"
	    log "$desktop_file created"
	fi
}

remove_desktop_file() {
    if [ -f "$desktop_file" ]; then
	    rm -f "$desktop_file"
	    log "$desktop_file removed"
	fi
}

check_for_update() {
    if [ "$update_check" = "false" ]; then
        return 1
    fi
    latest_version=$(curl --silent "$github_tags_url" | jq -r '.[0].name')
    if [ "$latest_version" = "" ]; then
        log "GitHub connection error"
        return 1
    fi
    if [ "$version" = "$latest_version" ]; then
        log "No update available. (latest $script_id version: $latest_version)"
        return 1
    fi
}

show_update_gui() {
    tmp_file="/tmp/$script_id.version"
    rm -f "$tmp_file"
    
    # Fetching latest version from github
    (curl --silent "$github_tags_url" | jq -r '.[0].name' > "$tmp_file") &
    if ! show_zenity_progress $! "Fetching latest $script_id version"; then
        send_notify "Connection Error"
        return 1
    fi
    
    latest_version=$(< "$tmp_file")
    if [ "$latest_version" = "" ]; then
        zenity_error "Cannot fetch latest version"
        return 1
    fi

    version_info_text="No update available!\n\nForce install update <b>$latest_version</b>?"
    if [ "$version" != "$latest_version" ]; then
        version_info_text="<b>New update available!</b>\n\nInstall update <b>$latest_version</b> now?"
    fi    
    version_text="Installed version:\t<b>$version</b>\nRemote version:\t\t<b>$latest_version</b>\n\n$version_info_text"
	update_info="<b>$script_id Updater</b>\n\n$version_text"
    
    if ! show_zenity_question "$update_info"; then
        log "User canceled"
        return 1
    fi
    
    tmp_dir="/tmp/$script_id-update-tmp"
    rm -R -f "$tmp_dir"
    mkdir -p "$tmp_dir"
    
    ( # Download
        latest_zip_url=$(curl --silent "$github_tags_url" | jq -r '.[0].zipball_url')
        curl -Lk "$latest_zip_url" -o "$tmp_dir/zipball.zip"
    ) & 
    
    if ! show_zenity_progress $! "Downloading $script_id-$latest_version"; then
        show_zenity_error "Error during download of $script_id-$latest_version"
        return 1
    fi
    
    ( # Installation
		unzip -o "$tmp_dir/zipball.zip" -d "$tmp_dir/"
		unziped_dir=$(find "$tmp_dir" -maxdepth 1 -name "$github_author-$github_repo-*" -printf "%f")
		cp -f -R "$tmp_dir/$unziped_dir/"* "$script_dir"
        chmod +x "$script_file"
    ) &    
    
    if ! show_zenity_progress $! "Installing $script_id-$latest_version"; then
        show_zenity_error "Error during installation of $script_id-$latest_version"
        return 1
    fi
    
    show_zenity_info "Update $script_id-$latest_version successfully installed"
    restart_script
}

show_gui_edit_configuration() {
    result=$(zenity --text-info --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$script_config_file")
    if [ $? = 0 ]; then
        echo "$result" > "$script_config_file"
        send_notify "Configuration saved"
        restart_script
    fi
}

show_gui_help() {
    zenity --text-info --ok-label="Ok" --cancel-label="Back" --html --filename="$script_help_file"
}

exec_wine() {
    log "Executing:env WINEPREFIX=$wineprefix $wine_default $@"
    env WINEPREFIX="$wineprefix" "$wine_default" "$@"
}

exec_wine_exe() {
    exec_wine start /unix "$@"
}

check_wine_default() {
    if [ ! -f "$wine_default" ]; then
    
        wine_version="4"
        if [ "$wine5_enabled" = "true" ]; then
            wine_version="5"
        fi
        
        if ! show_zenity_question "Wine $wine_version AppImage is required. Download now?"; then
            log "User canceled"
            return 1
        fi
    
        tmp_file="/tmp/wine.tmp"
        rm -f "$tmp_file"
        
        ( # Download
            wine_url="$wine4_url"
            if [ "$wine5_enabled" = "true" ]; then
                wine_url="$wine5_url"
            fi
            curl -Lk "$wine_url" -o "$tmp_file"    
        ) & 
                
        if ! show_zenity_progress $! "Downloading Wine $wine_version AppImage"; then
            show_zenity_error "Error during download Wine $wine_version"
            return 1
        fi
        
        ( # Installation
            mv "$tmp_file" "$wine_default"
            chmod +x "$wine_default"  
        ) & 
                
        if ! show_zenity_progress $! "Copy Wine $wine_version AppImage"; then
            show_zenity_error "Error during copy Wine $wine_version"
            return 1
        fi
        
        show_zenity_info "Wine $wine_version successfully downloaded"
    fi
}

check_for_mxl_update() {

    if [ "$mxl_update_check" = "false" ]; then
        return 1
    fi    
    
    # Parse mxl patch infos
    latest_mxl_patch_json_file="/tmp/$script_id-mxl_patch.json"
    curl "$mxl_version_url" -s | jq -r '.mod | [.[] ] | .[-1]' > "$latest_mxl_patch_json_file"

	latest_mxl_patch_version=$(< "$latest_mxl_patch_json_file" jq -r '.name' | cut -f3 -d" ")
	latest_mxl_patch_prefix="$patch_file_prefix-$latest_mxl_patch_version"

	if [ "$latest_mxl_patch_version" = "" ]; then
		log "No connection to $mxl_title server"
		return 1
	fi

    # Check if new mxl version available
    if [ -f "$patch_files_dir/$latest_mxl_patch_prefix.zip" ]; then
        log "No updates available $mxl_title $latest_mxl_patch_version patch file allready downloaded"
        return 1
    fi
}

check_d2_binary_dir() {
    if [ ! -d "$d2_dir" ]; then
	    show_zenity_info "Please choose Diablo II binary dir..."
	    directory=$(zenity --file-selection --directory)
        if [ $? = 1 ]; then
            log "User exit"
            return 1
        fi
	    if [ "$directory" = "" ]; then
	        log "Error: directory is empty"
	        return 1
	    fi
        replace_config_file_value "d2_dir" "$directory"
        restart_script
    fi
}

check_glide_installation() {
    if [ ! -f "$d2_dir/$d2_glide_exe" ]; then
        if ! show_zenity_question "Glide Wrapper not installed. Install now?"; then
            log "User canceled"
            return 1
        fi
    	if [ ! -f "$glide_res_file" ]; then
		    zenity_error "$glide_res_file not found!"
	        return 1
	    fi
        (unzip -o "$glide_res_file" -d "$d2_dir") &
        if ! show_zenity_progress $! "Installing Glide Wrapper"; then
            show_zenity_error "Error install glide wrapper"
            return 1
        fi
        
        show_zenity_info "Glide wrapper successfully installed"
    fi
}

show_mxl_download_gui() {
    if ! check_for_mxl_update; then
        show_zenity_info "No $mxl_title update available"
        return 1
    else
        # Create tmp download dir
        tmp_dir="/tmp/$latest_mxl_patch_prefix"
        rm -f -r "$tmp_dir"
        mkdir -p "$tmp_dir"
        cd "$tmp_dir" || exit 1;

        ( # Downloading
            log " Downloading $mxl_title $latest_mxl_patch_version dlls ..."
            curl "$mxl_dlls_url" -o "$tmp_dir/dlls.7z"
            log " Downloading $mxl_title $latest_mxl_patch_version mod ..."
            curl "$mxl_mod_url" -o "$tmp_dir/mod.7z"   
        ) &    
        if ! show_zenity_progress $! "Downloading $mxl_title $latest_mxl_patch_version"; then
	        show_zenity_error "Download error"
	        return 1
        fi
        
        ( # Extracting
            log " Extracting $mxl_title dll files ..."
            7z e "$tmp_dir/dlls.7z" -aoa
            rm -f "$tmp_dir/dlls.7z"
            log " Extracting $mxl_title mod files ..."
            7z e "$tmp_dir/mod.7z" -aoa
            rm -f "$tmp_dir/mod.7z"
            log " Creating $latest_mxl_patch_prefix patch ..."
            mkdir -p "$patch_files_dir"
            zip -r -0 "$patch_files_dir/$latest_mxl_patch_prefix.zip" .
        ) &    
        if ! show_zenity_progress $! "Downloading $mxl_title $latest_mxl_patch_version"; then
	        show_zenity_error "Download error"
	        return 1
        fi
        
        show_zenity_info "$mxl_title $latest_mxl_patch_version successfully downloaded"
    fi
}

show_gui_mxl_patch() {
	if [ ! -d "$patch_files_dir" ]; then
		show_zenity_error "No local $mxl_title patches found!\n\nDownload latest $mxl_title patch first."
		return 1
	fi
	if [ ! -f "$d2_patch_res_file" ]; then
		show_zenity_error "$d2_patch_res_file not found!"
		return 1
	fi
	if [ ! -f "$glide_res_file" ]; then
		zenity_error "$glide_res_file not found!"
		return 1
	fi

    # List path files
    cd "$patch_files_dir" || exit 1;
    patch_file_result=$( find . -maxdepth 1 -name '*.zip' -printf "%f\n" | sort -r | rev | cut -f 2- -d '.' | rev | show_zenity_menu "$mxl_title Patches" "Back" "Patch")
    patch_version=$(echo "$patch_file_result" | rev | cut -f 1 -d '-' | rev)

    if  [ $? = 0 ] && [ "$patch_file_result" != "" ]; then
        (
            install_glide
            unzip -o "$d2_patch_res_file" -d "$d2_dir"
            unzip -o "$patch_files_dir/$patch_file_result.zip" -d "$d2_dir"
            echo "$patch_version" > "$d2_dir/$mxl_version_file_name"
        ) &
        
        if ! show_zenity_progress $! "Patching $mxl_title $patch_version"; then
            show_zenity_error "Error during patching $mxl_title $patch_version"
            return 1
        fi
        show_zenity_info "$mxl_title $patch_version successfully patched"
    fi
}

exec_d2_stats() {
    if [ ! -f "$d2_stats_res_dir/$d2_stats_exe" ]; then
        if ! show_zenity_question "D2Stats is required. Download now?"; then
            return 1
        fi
        (
            mkdir -p "$d2_stats_res_dir"
            cd "$d2_stats_res_dir" || exit 1;
            rar_file=d2-stats.rar
            curl -Lk "$d2_stats_url" -o "$rar_file"
            unrar x "$rar_file"
            rm "$rar_file"
            log " D2Stats successfully downloaded"
        ) &
        if ! show_zenity_progress $! "Downloading D2Stats"; then
            rm -f -r "$d2_stats_res_dir"
            show_zenity_error "Error installing D2Stats"
            return 1
        fi
    fi
    
    if [ ! -f "$d2_dir/$d2_sigma_loader_exe" ]; then
        if ! show_zenity_question "$d2_sigma_loader_exe is required. Download now?"; then
            return 1
        fi
        (
            curl -Lk "$d2_sigma_loader_url" -o "$d2_dir/$d2_sigma_loader_exe"
            log " $d2_sigma_loader_exe successfully downloaded"
        ) & 
        if ! show_zenity_progress $! "Downloading $d2_sigma_loader_exe"; then
            rm -f "$d2_dir/$d2_sigma_loader_exe"
            show_zenity_error "Error installing $d2_sigma_loader_exe"
            return 1
        fi
    fi

	exec_wine_exe "$d2_stats_res_dir/$d2_stats_exe"
	
	# Workaround for disabling D2 Stats system tray
	for i in 1 2 3 4 5; do
	    sleep 1
        win_result=$(wmctrl -l | grep "Wine System Tray")
	    if [ "$win_result" != "" ]; then
	        wmctrl -c 'Wine System Tray'
	        log "Wine System Tray closed"
            break;
        fi
	done
}

exec_diablo() {
	if [ ! -f "$d2_dir/$d2_exe" ]; then
		show_zenity_error "$d2_dir/$d2_exe not found"
		return 1
	fi

    if pgrep -x "$d2_stats_exe" >/dev/null; then
	    exec_wine_exe "$d2_dir/$d2_sigma_loader_exe" "$d2_args"
    else
	    exec_wine_exe "$d2_dir/$d2_exe" "$d2_args"
    fi
    exit 0;
}

exec_glide_settings() {
	if [ ! -f "$d2_dir/$d2_glide_exe" ]; then
		show_zenity_error "$d2_dir/$d2_glide_exe not found"
		return 1
	fi
    exec_wine_exe "$d2_dir/$d2_glide_exe"
}

exec_d2_video_settings() {
	if [ ! -f "$d2_dir/$d2_vid_test_exe" ]; then
		show_zenity_error "$d2_dir/$d2_vid_test_exe not found"
		return 1
	fi
    exec_wine_exe "$d2_dir/$d2_vid_test_exe"
}

exec_export_data() {
    if [ ! -d "$mxl_savegames_dir" ]; then
	    show_zenity_error "$mxl_savegames_dir not found"
		return 1   
    fi
	directory=$(zenity --file-selection --directory)
	if [ "$directory" = "" ]; then
        return 1
	fi
	filename="$mxl_savegames_prefix-$(date "+%Y-%m-%d-%H%M").zip"
	cd "$mxl_savegames_dir" || exit 1;
	zip -r -0 "$directory/$filename" .
	show_zenity_info "Data successfully exported: $directory/$filename"
}

exec_import_data() {
	file=$(zenity --file-selection --file-filter="$mxl_savegames_prefix-*.zip")
	if [ "$file" = "" ]; then
	    return 1
	fi
    mkdir -p "$mxl_savegames_dir"
	unzip -o "$file" -d "$mxl_savegames_dir"
	show_zenity_info "$mxl_savegames_dir successfully imported"
}

show_gui_menu_settings() {
	item_01="Edit Configuration"
	item_02="Wine Settings"
	item_03="Glide Wrapper Settings"
	item_04="Diablo II Video Settings"
	item_05="Import $mxl_title Savegames"
	item_06="Export $mxl_title Savegames"
    result=$(show_zenity_menu "Settings" "Back" "Ok" "$item_01" "$item_02" "$item_03" "$item_04" "$item_05" "$item_06")
    if [ "$result" = "$item_01" ]; then
        show_gui_edit_configuration || return 1
        return 0
    fi
    if [ "$result" = "$item_02" ]; then
        check_wine_default || return 1
        exec_wine winecfg || return 1
        return 0
    fi
    if [ "$result" = "$item_03" ]; then
        check_wine_default || return 1
        check_glide_installation || return 1
        exec_glide_settings || return 1
        return 0
    fi
    if [ "$result" = "$item_04" ]; then
        check_wine_default || return 1
        exec_d2_video_settings || return 1
        return 0
    fi
    if [ "$result" = "$item_05" ]; then
        exec_import_data || return 1
        return 0
    fi
    if [ "$result" = "$item_06" ]; then
        exec_export_data || return 1
        return 0
    fi
}

show_gui_menu_update_manager() {
	item_01="Check for $github_repo update"
	item_02="Check for $mxl_title update"
	item_03="Force update Wine"
	item_04="Force update D2Stats"
    result=$(show_zenity_menu "Update Manager" "Back" "Ok" "$item_01" "$item_02" "$item_03" "$item_04")
    if [ "$result" = "$item_01" ]; then
        show_update_gui || return 1
        return 0
    fi
    if [ "$result" = "$item_02" ]; then
        check_d2_binary_dir || return 1
        show_mxl_download_gui || return 1
        return 0
    fi
    if [ "$result" = "$item_03" ]; then
        send_notify "not implemented yet"
        return 0
    fi
    if [ "$result" = "$item_04" ]; then
        check_d2_binary_dir || return 1
        send_notify "not implemented yet"
        return 0
    fi
}

show_gui_menu_main() {
	item_01="Diablo II"
	item_02="Statistics"
	item_03="$mxl_title Patches"
	item_04="Update Manager"
	item_05="Settings"
	item_06="Help"
    result=$(show_zenity_menu "" "Exit" "Ok" "$item_01" "$item_02" "$item_03" "$item_04" "$item_05" "$item_06")
    if [ $? = 1 ]; then
        exit 0;
    fi
    if [ "$result" = "$item_01" ]; then
        check_d2_binary_dir || return 1
        check_wine_default || return 1
        check_glide_installation || return 1
        exec_diablo || return 1
        return 0
    fi
    if [ "$result" = "$item_02" ]; then
        check_wine_default || return 1
        exec_d2_stats; return 1
        return 0
    fi
    if [ "$result" = "$item_03" ]; then
        check_d2_binary_dir || return 1
        show_gui_mxl_patch || return 1
        return 0
    fi
    if [ "$result" = "$item_04" ]; then
        show_gui_menu_update_manager || return 1
        return 0
    fi
    if [ "$result" = "$item_05" ]; then
        show_gui_menu_settings || return 1
        return 0
    fi
    if [ "$result" = "$item_06" ]; then
        show_gui_help || return 1
        return 0
    fi
}

(check_for_update && send_notify "New $script_id update available") &
(check_for_mxl_update && send_notify "New $mxl_title update available") &

while(true); do

    # Set wine default (if not set in config file)
    if [ "$wine_default" = "" ]; then
        wine_default="$wine4"
        if [ "$wine5_enabled" = "true" ]; then
            wine_default="$wine5"
        fi
    fi
    
    # Create or remove desktop icon
	if [ "$desktop_icon" = "true" ]; then
		create_desktop_file
	else
		remove_desktop_file
	fi
	
	# Show main menu
	if ! show_gui_menu_main; then
	    log "Warning: show_gui_menu_main returns $?"
	fi

done
