#!/bin/sh
#
# GitHub
# https://github.com/murkl/d2launcher
#
# Dependencies
# sudo apt install -y zenity wine-stable p7zip jq

script_title="Diablo II • Median XL • Linux"

script_file=$(readlink -f "$0")
script_file_name=$(basename "$script_file")
script_dir=$(dirname "$script_file")
script_config_file="$script_dir/$script_file_name.conf"
script_data_dir="$script_dir/data"

patch_files_dir="$script_dir/patches"
patch_file_prefix="d2launcher-mxl"

d2_mxl_core_data_file="$script_data_dir/d2-mxl-core.zip"
glide_data_file="$script_data_dir/gl32ogl14e.zip"

mxl_title="Median XL"
mxl_version_url=http://get.median-xl.com/launcher/?get=versions
mxl_dlls_url=http://get.median-xl.com/launcher/?get=dlls
mxl_mod_url=http://get.median-xl.com/launcher/?get=mod
mxl_data_dir="$HOME/.wine/drive_c/users/$USER/Application Data/MedianXL"
mxl_save_prefix="$script_file_name-mxl-save"

desktop_file_name="Diablo II"
desktop_file=$HOME/.local/share/applications/$script_file_name.desktop
icon_file=$script_data_dir/icon.png

##################################################################################

if ! [ -x "$(command -v zenity)" ]; then
  notify-send "$script_title" "zenity not installed. Install with sudo apt install zenity"
  exit 1;
fi

# Create config file
if [ ! -f "$script_config_file" ]; then

  zenity --info --width=250 --window-icon="$icon_file" --title="$script_title" --text="Please choose Diablo II installation dir ..."
  directory=$(zenity --file-selection --directory)

    if [ "$directory" != "" ]; then
      echo "d2_install_dir=\"$directory\"" >> $script_config_file
      echo "skip_to_mxl_login=true" >> $script_config_file
      echo "wine=wine" >> $script_config_file
      echo "wineprefix=\"$script_dir/wineprefix\"" >> $script_config_file
    else
      exit 1;
    fi

fi

# Import config file
. "$script_config_file"

##################################################################################

check_dependencies() {
  if ! [ -x "$(command -v $wine)" ]; then
    show_zenity_error "wine not installed. Install with sudo apt install wine-stable"
    exit 1;
  fi
  if ! [ -x "$(command -v 7z)" ]; then
    show_zenity_error "7z not installed. Install with sudo apt install p7zip"
    exit 1;
  fi
	if ! [ -x "$(command -v jq)" ]; then
   show_zenity_error "jq not installed. Install with sudo apt install jq"
    exit 1;
  fi
}


show_zenity_info() {
  zenity --width=350 --window-icon="$icon_file" --info --text "$1"
}


show_zenity_error() {
  zenity --width=350 --window-icon="$icon_file" --error --text "$1"
}


exec_diablo() {

  if [ ! -f "$d2_install_dir/Diablo II.exe" ]; then
    show_zenity_error "$d2_install_dir/Diablo II.exe not found"
    exit 1;
  fi

  install_glide

  d2_args="-3dfx"
  if [ "$skip_to_mxl_login" = "true" ]; then
    d2_args="${d2_args} -skiptobnet"
  fi

  cd "$d2_install_dir"

  # -3dfx -ns -sndbkg -skiptobnet
  env WINEPREFIX="$wineprefix" $wine start /unix "Diablo II.exe" $d2_args
}


download_mxl() {

  # Parse patch infos
  latest_mxl_patch_json=$(curl "$mxl_version_url" -s | jq -r '.mod | [.[] ] | .[-1]')
  latest_mxl_patch_version=$(echo "$latest_mxl_patch_json" | jq -r '.name' | cut -f3 -d" ")
  latest_mxl_patch_prefix="$patch_file_prefix-$latest_mxl_patch_version"

  if [ "$latest_mxl_patch_version" = "" ]; then
    show_zenity_error "No connection to server"
    exit 1;
  fi

  # Check if new mxl version available
  if [ -f "$patch_files_dir/$latest_mxl_patch_prefix.zip" ]; then

    show_zenity_info "No updates available!\n\n$mxl_title $latest_mxl_patch_version patch file allready downloaded."

  else

    # Create tmp download dir
    tmp_dir="/tmp/$latest_mxl_patch_prefix"
    rm -f -r "$tmp_dir"
    mkdir -p "$tmp_dir"
    cd "$tmp_dir"

    ( # Download latest Median XL patch
      echo "10"
      echo "# Downloading $mxl_title $latest_mxl_patch_version dlls ..."
      curl $mxl_dlls_url -o $tmp_dir/dlls.7z

      echo "35"
      echo "# Downloading $mxl_title $latest_mxl_patch_version mod ..."
      curl $mxl_mod_url -o $tmp_dir/mod.7z

      echo "70"
      echo "# Extracting $mxl_title dll files ..."
      7z e "$tmp_dir/dlls.7z" -aoa
      rm -f "$tmp_dir/dlls.7z"

      echo "75"
      echo "# Extracting $mxl_title mod files ..."
      7z e "$tmp_dir/mod.7z" -aoa
      rm -f "$tmp_dir/mod.7z"

      echo "85"
      echo "# Creating $latest_mxl_patch_prefix patch ..."
      echo "$latest_mxl_patch_json" >> "$tmp_dir/$patch_file_prefix.json"
      mkdir -p "$patch_files_dir"
      zip -r -0 "$patch_files_dir/$latest_mxl_patch_prefix.zip" .

      echo "100"
      echo "# $mxl_title $latest_mxl_patch_version patch successfully downloaded"

    ) | zenity --window-icon="$icon_file" --height=150 --width=350 --progress --text="Downloading $mxl_title $latest_mxl_patch_version" --percentage=5 --auto-kill --pulsate

    if [ "$?" = -1 ] ; then
      show_zenity_error "Download error"
    fi

  fi
}


patch_mxl() {

  if [ ! -d "$patch_files_dir" ]; then
    show_zenity_error "No local $mxl_title patches found!\n\nDownload latest $mxl_title patch first."
    exit 1;
  fi

  if [ ! -f "$d2_mxl_core_data_file" ]; then
    show_zenity_error "$d2_mxl_core_data_file not found!"
    exit 1;
  fi

  cd "$patch_files_dir"

  # List path files
  patch_version=$( ls *.zip | rev | cut -f 2- -d '.' | rev | zenity --list --window-icon="$icon_file" --height=300 --width=300 --title="$mxl_title" --text="Choose $mxl_title patch to install\n" --column="Available local patches" )

  if  [ "$?" -eq 0 ] && [ "$patch_version" != "" ]; then
    (

      echo "10"
      echo "# Patching glide ..."
      install_glide

      echo "25"
      echo "# Patching $d2_mxl_core_data_file ..."
      unzip -o "$d2_mxl_core_data_file" -d "$d2_install_dir"

      echo "45"
      echo "# Patching $patch_file_prefix-$patch_version.zip ..."
      unzip -o "$patch_files_dir/$patch_file_prefix-$patch_version.zip" -d "$d2_install_dir"

      echo "100"
      echo "# $mxl_title $patch_version successfully patched"

    ) | zenity --window-icon="$icon_file" --height=150 --width=350 --progress --text="Patching $mxl_title $patch_version" --percentage=5 --auto-kill --pulsate

    if [ "$?" = -1 ] ; then
      show_zenity_error "Installation error"
    fi

  fi
}


exec_d2_video_settings() {

  if [ ! -f "$d2_install_dir/D2VidTst.exe" ]; then
    show_zenity_error "$d2_install_dir/D2VidTst.exe not found"
    exit 1;
  fi

  cd "$d2_install_dir"
  env WINEPREFIX="$wineprefix" $wine start /unix "D2VidTst.exe"
}


install_glide() {

  if [ ! -f "$d2_install_dir/glide-init.exe" ]; then

    if [ ! -f "$glide_data_file" ]; then
      zenity_error "$glide_data_file not found!"
      exit 1;
    fi

    unzip -o "$glide_data_file" -d "$d2_install_dir"

  fi
}


exec_glide_settings() {

  install_glide

  cd "$d2_install_dir"
  env WINEPREFIX="$wineprefix" $wine start /unix "glide-init.exe"
}


export_data() {

  directory=$(zenity --file-selection --directory)

  if [ "$directory" != "" ]; then

    filename="$mxl_save_prefix-$(date "+%Y%m%d%H%M").zip"

    cd "$mxl_data_dir"
    zip -r -0 "$directory/$filename" .

    show_zenity_info "Data successfully exported: $directory/$filename"

  fi
}


import_data() {

  file=$(zenity --file-selection --file-filter="$mxl_save_prefix-*.zip")

  if [ "$file" != "" ]; then

    rm -R "$mxl_data_dir/*"
    unzip -o "$file" -d "$mxl_data_dir"

    show_zenity_info "$mxl_data_dir successfully imported"

  fi
}


create_desktop_file() {

  rm -f $desktop_file

  echo "[Desktop Entry]" >> $desktop_file
  echo "Name=$desktop_file_name" >> $desktop_file
  echo "Icon=$icon_file" >> $desktop_file
  echo "Exec=\"$script_file\"" >> $desktop_file
  echo "Type=Application" >> $desktop_file

  chmod +x $desktop_file

  show_zenity_info "$desktop_file successfully created"
}


remove_desktop_file() {

  rm -f $desktop_file
  show_zenity_info "$desktop_file successfully removed"
}


##################################################################################

check_dependencies

while(true); do

  d2_postfix=""
  d2_xml_version_file="$d2_install_dir/$patch_file_prefix.json"

  if [ -f "$d2_xml_version_file" ]; then
    d2_postfix=" & "$(cat $d2_xml_version_file | jq -r '.name')
  fi

  item_01="Start Diablo II$d2_postfix"
  item_02="Download latest $mxl_title patch"
  item_03="Install local $mxl_title patch"
  item_04="Open D2 Video Settings"
  item_05="Open Glide Settings"
  item_06="Import $mxl_title Savegames"
  item_07="Export $mxl_title Savegames"

  if [ ! -f $desktop_file ]; then
    item_08="Create Menu Entry"
  else
    item_08="Remove Menu Entry"
  fi

  # Show menu
  result=$(zenity --list --radiolist --window-icon="$icon_file" --height=350 --width=300 --text="$script_title\n" --hide-header --column="" --column="" TRUE "$item_01" FALSE "$item_02" FALSE "$item_03" FALSE "$item_04" FALSE "$item_05" FALSE "$item_06" FALSE "$item_07" FALSE "$item_08")

  # If user exit
  if [ $? = 1 ]; then
    break; exit 0;
  fi

  if [ "$result" = "$item_01" ]; then
    exec_diablo
    exit 0;
  fi
  if [ "$result" = "$item_02" ]; then
    download_mxl
  fi
  if [ "$result" = "$item_03" ]; then
    patch_mxl
  fi
  if [ "$result" = "$item_04" ]; then
    exec_d2_video_settings
  fi
  if [ "$result" = "$item_05" ]; then
    exec_glide_settings
  fi
  if [ "$result" = "$item_06" ]; then
    import_data
  fi
  if [ "$result" = "$item_07" ]; then
    export_data
  fi
  if [ "$result" = "$item_08" ]; then
    if [ ! -f "$desktop_file" ]; then
      create_desktop_file
    else
      remove_desktop_file
    fi
  fi

done
