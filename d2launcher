#!/bin/sh
# https://github.com/murkl/d2launcher

script_title="Diablo II • Median XL • Standalone"

script_file=$(readlink -f "$0")
script_file_name=$(basename "$script_file")
script_dir=$(dirname "$script_file")
script_config_file="$script_dir/$script_file_name.conf"
script_data_dir="$script_dir/res"
script_icon_file=$script_data_dir/icon.png
script_help_file="$script_data_dir/d2launcher-help.html"

# Download urls
wine_url="https://github.com/ferion11/Proton_Appimage/releases/download/continuous/proton-linux-x86-v4.2-PlayOnLinux-x86_64.AppImage"
d2_stats_url="https://github.com/Kyromyr/D2Stats/releases/download/3.11.0/D2Stats-3.11.0.rar"
sigma_loader_url="https://github.com/SyndromeDayna/diablo-2-median-xl-sigma-loader/releases/latest/download/sigma-loader.exe"

patch_files_dir="$script_data_dir/patches"
patch_file_prefix="d2launcher-mxl"

d2_patch_data_file="$script_data_dir/d2-1.13c_files.zip"
glide_data_file="$script_data_dir/gl32ogl14e.zip"

mxl_title="Median XL"
mxl_version_url=http://get.median-xl.com/launcher/?get=versions
mxl_dlls_url=http://get.median-xl.com/launcher/?get=dlls
mxl_mod_url=http://get.median-xl.com/launcher/?get=mod

mxl_data_dir="$wineprefix/drive_c/users/steamuser/Application Data/MedianXL"
mxl_save_prefix="$script_file_name-mxl-save"

desktop_file_name="Diablo II"
desktop_file=$HOME/.local/share/applications/$script_file_name.desktop

d2_stats_dir="$script_data_dir/d2-stats"

send_notify() {
	notify-send -i "$script_icon_file" "$script_title" "$1"
}

# Check dependencies
if ! [ -x "$(command -v zenity)" ]; then
	send_notify "zenity not installed"
	exit 1;
fi
if ! [ -x "$(command -v 7z)" ]; then
	send_notify "7z not installed"
	exit 1;
fi
if ! [ -x "$(command -v unrar)" ]; then
	send_notify "unrar not installed"
	exit 1;
fi
if ! [ -x "$(command -v jq)" ]; then
	send_notify "jq not installed"
	exit 1;
fi

zenity() {
	/usr/bin/zenity --name="$script_file_name" --title="$script_title" --window-icon="$script_icon_file" --height=130 --width=350 "$@" 2>/dev/null
}

show_zenity_info() {
	zenity --info --text "$1"
}

show_zenity_error() {
	zenity --error --text "$1"
}

create_desktop_file() {
	rm -f $desktop_file
	echo "[Desktop Entry]" >> $desktop_file
	echo "Name=$desktop_file_name" >> $desktop_file
	echo "Icon=$script_icon_file" >> $desktop_file
	echo "Exec=\"$script_file\"" >> $desktop_file
	echo "Type=Application" >> $desktop_file
	chmod +x $desktop_file
	show_zenity_info "$desktop_file successfully created"
}

remove_desktop_file() {
	rm -f $desktop_file
	show_zenity_info "$desktop_file successfully removed"
}

install_glide() {
	if [ ! -f "$d2_binary_dir/glide-init.exe" ]; then
		if [ ! -f "$glide_data_file" ]; then
			zenity_error "$glide_data_file not found!"
			exit 1;
		fi
	    unzip -o "$glide_data_file" -d "$d2_binary_dir"
	    send_notify "Glide wrapper was installed in background"
	fi
}

exec_wine_download() {
    (
        tmp_file="/tmp/wine.tmp"
        curl -Lk $wine_url -o $tmp_file
        mv $tmp_file $wine
        chmod +x $wine
        echo "# Wine standalone successfully downloaded"
    ) | zenity --progress --text="Downloading Wine standalone" --auto-kill --pulsate
}

exec_diablo() {
	if [ ! -f "$d2_binary_dir/Diablo II.exe" ]; then
		show_zenity_error "$d2_binary_dir/Diablo II.exe not found"
		exit 1;
	fi

	install_glide

	cd "$d2_binary_dir"
	env WINEPREFIX="$wineprefix" $wine start /unix "$d2_exec" "$d2_args"
}

exec_download_mxl() {
	# Parse mxl patch infos
	latest_mxl_patch_json=$(curl "$mxl_version_url" -s | jq -r '.mod | [.[] ] | .[-1]')
	latest_mxl_patch_version=$(echo "$latest_mxl_patch_json" | jq -r '.name' | cut -f3 -d" ")
	latest_mxl_patch_prefix="$patch_file_prefix-$latest_mxl_patch_version"

	if [ "$latest_mxl_patch_version" = "" ]; then
		show_zenity_error "No connection to $mxl_title server"
		exit 1;
	fi

    # Check if new mxl version available
    if [ -f "$patch_files_dir/$latest_mxl_patch_prefix.zip" ]; then
        show_zenity_info "No updates available!\n\n$mxl_title $latest_mxl_patch_version patch file allready downloaded."
    else
        # Create tmp download dir
        tmp_dir="/tmp/$latest_mxl_patch_prefix"
        rm -f -r "$tmp_dir"
        mkdir -p "$tmp_dir"
        cd "$tmp_dir"

        ( # Download latest Median XL patch
            echo "# Downloading $mxl_title $latest_mxl_patch_version dlls ..."
            curl $mxl_dlls_url -o $tmp_dir/dlls.7z

            echo "# Downloading $mxl_title $latest_mxl_patch_version mod ..."
            curl $mxl_mod_url -o $tmp_dir/mod.7z

            echo "# Extracting $mxl_title dll files ..."
            7z e "$tmp_dir/dlls.7z" -aoa
            rm -f "$tmp_dir/dlls.7z"

            echo "# Extracting $mxl_title mod files ..."
            7z e "$tmp_dir/mod.7z" -aoa
            rm -f "$tmp_dir/mod.7z"

            echo "# Creating $latest_mxl_patch_prefix patch ..."
            mkdir -p "$patch_files_dir"
            zip -r -0 "$patch_files_dir/$latest_mxl_patch_prefix.zip" .

            echo "# $mxl_title $latest_mxl_patch_version patch successfully downloaded"

        ) | zenity --progress --text="Downloading $mxl_title $latest_mxl_patch_version" --auto-kill --pulsate

        if [ "$?" = -1 ] ; then
	        show_zenity_error "Download error"
        fi
  fi
}

exec_patch_mxl() {
	if [ ! -d "$patch_files_dir" ]; then
		show_zenity_error "No local $mxl_title patches found!\n\nDownload latest $mxl_title patch first."
		exit 1;
	fi

	if [ ! -f "$d2_patch_data_file" ]; then
		show_zenity_error "$d2_patch_data_file not found!"
		exit 1;
	fi

    # List path files
    cd "$patch_files_dir"
    patch_file_result=$( ls -r *.zip | rev | cut -f 2- -d '.' | rev | zenity --list --height=350 --text="Choose $mxl_title patch to install\n" --column="Available local patches" )

    if  [ "$?" -eq 0 ] && [ "$patch_file_result" != "" ]; then
        (
            patch_version=$(echo "$patch_file_result" | rev | cut -f 1 -d '-' | rev)

            echo "# Patching glide ..."
            install_glide

            echo "# Patching $d2_patch_data_file ..."
            unzip -o "$d2_patch_data_file" -d "$d2_binary_dir"

            echo "# Patching $patch_file_result.zip ..."
            unzip -o "$patch_files_dir/$patch_file_result.zip" -d "$d2_binary_dir"

            echo "$patch_version" > "$d2_binary_dir/$patch_file_prefix.version"
            echo "# $mxl_title $patch_version successfully patched"

        ) | zenity --progress --text="Patching $mxl_title $patch_version" --auto-kill --pulsate

        if [ "$?" = -1 ] ; then
            show_zenity_error "Installation error"
        fi
    fi
}


exec_d2_stats() {
    if [ ! -f "$d2_stats_dir/D2Stats.exe" ]; then
        zenity --question --text="D2Stats is required. Download now?"
        if [ $? == 1 ]; then
            exit 0;
        fi
        (
            mkdir -p "$d2_stats_dir"
            cd "$d2_stats_dir"
            rar_file=d2-stats.rar
            curl -Lk $d2_stats_url -o $rar_file
            unrar x $rar_file
            rm $rar_file
            echo "# D2-Stats successfully downloaded"
        ) | zenity --progress --text="Downloading D2-Stats" --auto-kill --pulsate
    fi
    if [ ! -f "$d2_binary_dir/sigma-loader.exe" ]; then
        zenity --question --text="sigma-loader.exe is required. Download now?"
        if [ $? == 1 ]; then
            exit 0;
        fi
        (
            curl -Lk $sigma_loader_url -o "$d2_binary_dir/sigma-loader.exe"
            replace_config_file_value "d2_exec" "\"sigma-loader.exe\""
            echo "# sigma-loader.exe successfully downloaded"
        ) | zenity --progress --text="Downloading sigma-loader.exe" --auto-kill --pulsate
    fi

	env WINEPREFIX="$wineprefix" $wine start /unix "$d2_stats_dir/D2Stats.exe"
	
	# Workaround for disabling D2 Stats system tray
	for i in 1 2 3 4 5; do
	    sleep 1
        win_result=$(wmctrl -l | grep "Wine System Tray")
	    if [ "$win_result" != "" ]; then
	        wmctrl -c 'Wine System Tray'
	        echo "Wine System Tray closed"
            break;
        fi
	done
}

exec_d2_video_settings() {
	if [ ! -f "$d2_binary_dir/D2VidTst.exe" ]; then
		show_zenity_error "$d2_binary_dir/D2VidTst.exe not found"
		exit 1;
	fi
	cd "$d2_binary_dir"
	env WINEPREFIX="$wineprefix" $wine start /unix "D2VidTst.exe"
}

exec_glide_settings() {
    install_glide
    cd "$d2_binary_dir"
    env WINEPREFIX="$wineprefix" $wine start /unix "glide-init.exe"
}

exec_export_data() {
	directory=$(zenity --file-selection --directory)
	if [ "$directory" != "" ]; then
		filename="$mxl_save_prefix-$(date "+%Y%m%d%H%M").zip"
		cd "$mxl_data_dir"
		zip -r -0 "$directory/$filename" .
		show_zenity_info "Data successfully exported: $directory/$filename"
	fi
}

exec_import_data() {
	file=$(zenity --file-selection --file-filter="$mxl_save_prefix-*.zip")
	mkdir -p "$mxl_data_dir"
	if [ "$file" != "" ]; then
		unzip -o "$file" -d "$mxl_data_dir"
		show_zenity_info "$mxl_data_dir successfully imported"
	fi
}

show_help() {
    zenity --text-info --width=500 --height=500 --html --filename="$script_help_file"
}

replace_config_file_value() {
    key=$1
    value=$2
    # Maybe -c is needed
    sed -i "s/\($key *= *\).*/\1$value/" $script_config_file
    send_notify "$key was changed to $value in $script_config_file"
}

# Create config file
if [ ! -f "$script_config_file" ]; then
	zenity --info --width=250 --window-icon="$script_icon_file" --text="Please choose Diablo II binary dir..."
	directory=$(zenity --file-selection --directory)
	if [ "$directory" != "" ]; then
		echo "wine=\"$script_data_dir/wine\"" >> $script_config_file
		echo "wineprefix=\"$script_dir/.wineprefix\"" >> $script_config_file
		echo "d2_binary_dir=\"$directory\"" >> $script_config_file
		echo "d2_exec=\"Diablo II.exe\"" >> $script_config_file
		echo "d2_args=\"-3dfx -skiptobnet\"" >> $script_config_file		
	else
		exit 1;
	fi
fi

# Import config file
. "$script_config_file"

# Check for wine standalone
if [ ! -f "$wine" ]; then
    zenity --question --text="Wine Standalone is required. Download now?"
    if [ $? == 1 ]; then
        exit 0;
    fi
    exec_wine_download
fi

# Main
while(true); do

    # Refresh config file
    . "$script_config_file"
    
    mxl_status="$mxl_title not installed!"
	d2_xml_version_file="$d2_binary_dir/$patch_file_prefix.version"

	if [ -f "$d2_xml_version_file" ]; then
		mxl_status="Installed $mxl_title version: "$(cat $d2_xml_version_file)
	fi

	item_01="Start Diablo II"
	item_02="Download latest $mxl_title patch"
	item_03="Install local $mxl_title patch"
	item_04="Open D2 Stats"
	item_05="Open D2 Video Settings"
	item_06="Open Glide Settings"
	item_07="Import $mxl_title Savegames"
	item_08="Export $mxl_title Savegames"

	if [ ! -f $desktop_file ]; then
		item_09="Create Menu Entry"
	else
		item_09="Remove Menu Entry"
	fi
	item_10="Help"

    # Show menu
    result=$(zenity --list --radiolist --height=350 --text="$mxl_status\n" --hide-header --column="" --column="" TRUE "$item_01" FALSE "$item_02" FALSE "$item_03" FALSE "$item_04" FALSE "$item_05" FALSE "$item_06" FALSE "$item_07" FALSE "$item_08" FALSE "$item_09" FALSE "$item_10")

    # If user exit
    if [ $? = 1 ]; then
        break; exit 0;
    fi
    if [ "$result" = "$item_01" ]; then
        exec_diablo
        exit 0;
    fi
    if [ "$result" = "$item_02" ]; then
        exec_download_mxl
    fi
    if [ "$result" = "$item_03" ]; then
        exec_patch_mxl
    fi
    if [ "$result" = "$item_04" ]; then
        exec_d2_stats
    fi
    if [ "$result" = "$item_05" ]; then
        exec_d2_video_settings
    fi
    if [ "$result" = "$item_06" ]; then
        exec_glide_settings
    fi
    if [ "$result" = "$item_07" ]; then
        exec_import_data
    fi
    if [ "$result" = "$item_08" ]; then
        exec_export_data
    fi
    if [ "$result" = "$item_09" ]; then
        if [ ! -f "$desktop_file" ]; then
            create_desktop_file
        else
            remove_desktop_file
        fi
    fi
    if [ "$result" = "$item_10" ]; then
        show_help
    fi
done
