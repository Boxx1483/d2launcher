#!/bin/bash

# https://github.com/murkl/d2launcher

version=3.0.8

github_author=murkl
github_repo=d2launcher

script_title="Diablo II • Median XL • Standalone"

# Script
script_file=$(readlink -f "$0")
script_dir=$(dirname "$script_file")
script_id=$(basename "$script_file")
update_check=true

script_config_file="$script_dir/$script_id.conf"
script_res_dir="$script_dir/res"
script_icon_file="$script_res_dir/icon.svg"
script_help_file="$script_res_dir/$script_id-help.html"

# Gui
desktop_file="$HOME/.local/share/applications/$script_id.desktop"
desktop_file_name="Diablo II"
desktop_icon=true
gui_width=465
gui_height=365
gui_dialog_height=165

# Title theming
title_color="#87270A"
title_font="monospace"
title_size="8"

# Wine AppImage
wine4_url="https://github.com/ferion11/Wine_Appimage/releases/download/v4.21/wine-staging-linux-x86-v4.21-PlayOnLinux-x86_64.AppImage"
wine5_url="https://github.com/ferion11/Wine_Appimage_dev/releases/download/continuous/wine-staging-linux-x86-v5.5-PlayOnLinux-x86_64.AppImage"
wine4="$script_res_dir/wine4.AppImage"
wine5="$script_res_dir/wine5.AppImage"
wineprefix="$script_dir/.wineprefix"
wine_user="$USER"
wine_default="$wine4"
wine5_enabled=false

# Local res files
d2_patch_res_file="$script_res_dir/d2-1.13c_files.zip"
glide_res_file="$script_res_dir/gl32ogl14e.zip"

# Patch files
patch_files_dir="$script_res_dir/patches"
patch_file_prefix="d2launcher-mxl"

# Diablo II
d2_binary_dir=""
d2_exec="Diablo II.exe"
d2_args="-3dfx"
d2_vid_test_exe="D2VidTst.exe"
d2_glide_exe="glide-init.exe"

# Median XL
mxl_title="Median XL"
mxl_version_url="http://get.median-xl.com/launcher/?get=versions"
mxl_dlls_url="http://get.median-xl.com/launcher/?get=dlls"
mxl_mod_url="http://get.median-xl.com/launcher/?get=mod"
mxl_update_check=true

mxl_savegames_dir="$wineprefix/drive_c/users/$wine_user/Application Data/MedianXL"
mxl_savegames_prefix="$script_id-mxl-save"

mxl_version_file_name="$patch_file_prefix.version"

# D2 Stats
d2_stats_url="https://github.com/Kyromyr/D2Stats/releases/download/3.11.0/D2Stats-3.11.0.rar"
d2_stats_res_dir="$script_res_dir/d2-stats"
d2_stats_exe="D2Stats.exe"
d2_sigma_loader_url="https://github.com/SyndromeDayna/diablo-2-median-xl-sigma-loader/releases/download/3/sigma-loader.exe"
d2_sigma_loader_exe="sigma-loader.exe"

log() {
	echo "$(date "+%H:%M:%S") $script_id-$version: $1"
}

# Create new config file
if [ ! -f "$script_config_file" ]; then
    {
        echo "d2_binary_dir=\"$d2_binary_dir\""
        echo "d2_exec=\"$d2_exec\""
        echo "d2_args=\"$d2_args\""
        echo "wine5_enabled=$wine5_enabled"
        echo "gui_width=$gui_width"
        echo "gui_height=$gui_height"
        echo "desktop_icon=$desktop_icon"
        echo "update_check=$update_check"
        echo "mxl_update_check=$mxl_update_check"
    } >> "$script_config_file"
    log "$script_config_file created"
fi

# Import config file
. "$script_config_file"

send_notify() {
    log "$1"
	notify-send -i "$script_icon_file" "$script_title" "$1"
}

# Check dependencies
if ! [ -x "$(command -v zenity)" ]; then
	send_notify "zenity not installed"
	exit 1;
fi
if ! [ -x "$(command -v curl)" ]; then
	send_notify "curl not installed"
	exit 1;
fi
if ! [ -x "$(command -v 7z)" ]; then
	send_notify "p7zip not installed"
	exit 1;
fi
if ! [ -x "$(command -v unrar)" ]; then
	send_notify "unrar not installed"
	exit 1;
fi
if ! [ -x "$(command -v jq)" ]; then
	send_notify "jq not installed"
	exit 1;
fi
if ! [ -x "$(command -v wmctrl)" ]; then
	send_notify "wmctrl not installed"
	exit 1;
fi

zenity() {
	/usr/bin/zenity --name="$script_id" --title="$script_title" --window-icon="$script_icon_file" --width="$gui_width" --height="$gui_dialog_height" "$@" 2>/dev/null
}

show_zenity_info() {
    log "$1"
	zenity --info --text="$1"
	return "$?"
}

show_zenity_error() {
    log "$1"
	zenity --error --text="$1"
	return "$?"
}

show_zenity_question() {
    zenity --question --text="$1"
    return "$?"
}

restart_script() {
    log "Restarting script..."
    "$script_file" &
    exit 0;
}

replace_config_file_value() {
    key=$1
    value=$2
    sed -i "s#$key=.*#$key=\"$value\"#g" "$script_config_file"
    log "$key was set to $value"
    return 1
}

create_desktop_file() {
    if [ ! -f "$desktop_file" ]; then
	    {
	        echo "[Desktop Entry]"
	        echo "Name=$desktop_file_name"
	        echo "Icon=$script_icon_file"
	        echo "Exec=\"$script_file\""
	        echo "Type=Application"
	    } >> "$desktop_file"
	    chmod +x "$desktop_file"
	    log "$desktop_file created"
	    return 1
	fi
	return 0
}

remove_desktop_file() {
    if [ -f "$desktop_file" ]; then
	    rm -f "$desktop_file"
	    log "$desktop_file removed"
	    return 1
	fi
	return 0
}

check_for_update() {
    if [ "$update_check" = "false" ]; then
        return 0
    fi
    latest_version=$(curl --silent "https://api.github.com/repos/$github_author/$github_repo/tags" | jq -r '.[0].name')
    if [ "$latest_version" = "" ]; then
        log "GitHub connection error"
        return 0
    fi
    if [ "$version" = "$latest_version" ]; then
        log "No update available. (latest $script_id version: $latest_version)"
        return 0
    fi
    return 1
}

show_update_gui() {

    tmp_file="/tmp/$script_id.version"
    rm -f "$tmp_file"
    ( curl --silent "https://api.github.com/repos/$github_author/$github_repo/tags" | jq -r '.[0].name' > "$tmp_file" )| zenity --progress --text="Fetching latest $script_id version" --pulsate --auto-close
    latest_version=$(< "$tmp_file")
    if [ "$latest_version" = "" ]; then
        send_notify "GitHub connection error"
        return 0
    fi

    version_info_text="No update available!\n\nForce install update <b>$latest_version</b>?"
    if [ "$version" != "$latest_version" ]; then
        version_info_text="<b>New update available!</b>\n\nInstall update <b>$latest_version</b> now?"
    fi
    version_text="Installed version:\t<b>$version</b>\nRemote version:\t\t<b>$latest_version</b>\n\n$version_info_text"
	update_info='<span font_family="'$title_font'" foreground="'$title_color'" font="'$title_size'"><b>'$script_id' Updater</b>\n\n'$version_text'</span>'
    show_zenity_question "$update_info"
    if [ $? = 1 ]; then
        log "User canceled"
        return 0
    fi
    (
        tmp_dir=/tmp/$script_id.tmp
        rm -R -f "$tmp_dir"
        mkdir -p "$tmp_dir"
        latest_zip=$(curl --silent "https://api.github.com/repos/$github_author/$github_repo/tags" | jq -r '.[0].zipball_url')
        curl -Lk "$latest_zip" -o "$tmp_dir/zipball.zip"
		unzip -o "$tmp_dir/zipball.zip" -d "$tmp_dir/"
		unziped_dir=$(find $tmp_dir -maxdepth 1 -name "$github_author-$github_repo-*" -printf "%f")
		cp -f -R "$tmp_dir/$unziped_dir/"* "$script_dir"
        chmod +x "$script_file"
        
        echo "# $script_id $latest_version successfully installed"
        
    ) | zenity --progress --text="Updating $script_id-$latest_version" --pulsate
    
    return 1
}

show_edit_config() {
    result=$(zenity --text-info --height="$gui_height" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$script_config_file")
    if [ $? = 0 ]; then
        echo "$result" > "$script_config_file"
        send_notify "Configuration saved"
        return 1
    fi
    return 0
}

show_help_gui() {
    zenity --text-info --height="$gui_height" --ok-label="Ok" --cancel-label="Back" --html --filename="$script_help_file"
    return 0
}

check_for_mxl_update() {

    if [ "$mxl_update_check" = "false" ]; then
        return 0
    fi    
    # Parse mxl patch infos
    latest_mxl_patch_json_file="/tmp/$script_id-mxl_patch.json"
    curl "$mxl_version_url" -s | jq -r '.mod | [.[] ] | .[-1]' > "$latest_mxl_patch_json_file"

	latest_mxl_patch_version=$(< "$latest_mxl_patch_json_file" jq -r '.name' | cut -f3 -d" ")
	latest_mxl_patch_prefix="$patch_file_prefix-$latest_mxl_patch_version"

	if [ "$latest_mxl_patch_version" = "" ]; then
		log "No connection to $mxl_title server"
		return 0
	fi

    # Check if new mxl version available
    if [ -f "$patch_files_dir/$latest_mxl_patch_prefix.zip" ]; then
        log "No updates available $mxl_title $latest_mxl_patch_version patch file allready downloaded"
        return 0
    fi
    
    return 1
}

check_d2_binary_dir() {
    if [ ! -d "$d2_binary_dir" ]; then
	    show_zenity_info "Please choose Diablo II binary dir..."
	    directory=$(zenity --file-selection --directory)
	    if [ "$directory" != "" ]; then
            replace_config_file_value "d2_binary_dir" "$directory"
	        return 1
	    fi
    fi
    return 0
}

check_wine_standalone() {
    if [ ! -f "$wine_default" ]; then
        wine_version="4"
        if [ "$wine5_enabled" = "true" ]; then
            wine_version="5"
        fi
        show_zenity_question "Wine $wine_version AppImage is required. Download now?"
        if [ $? = 1 ]; then
            log "User canceled"
            return 1
        fi
        (
            install_wine
            echo "# Wine $wine_version AppImage successfully downloaded"
        ) | zenity --progress --text="Downloading Wine $wine_version AppImage" --auto-kill --pulsate
        return 1
    fi
    return 0
}

install_wine() {
    tmp_file="/tmp/wine.tmp"
    wine_url="$wine4_url"
    if [ "$wine5_enabled" = "true" ]; then
        wine_url="$wine5_url"
    fi
    curl -Lk "$wine_url" -o "$tmp_file"
    mv "$tmp_file" "$wine_default"
    chmod +x "$wine_default"    
    return 0
}

check_glide_installation() {
    if [ ! -f "$d2_binary_dir/$d2_glide_exe" ]; then
        show_zenity_question "Glide Wrapper not installed. Install now?"
        if [ $? = 1 ]; then
            log "User canceled"
            return 1;
        fi
        (
	        install_glide
            echo "# Glide wrapper successfully installed"
        ) | zenity --progress --text="Installing Glide Wrapper" --auto-kill --pulsate
        return 1
    fi
    return 0
}

install_glide() {
	if [ ! -f "$glide_res_file" ]; then
		zenity_error "$glide_res_file not found!"
		exit 1
	fi
    unzip -o "$glide_res_file" -d "$d2_binary_dir"
    return 0
}

show_mxl_download_gui() {
    if check_for_mxl_update; then
        show_zenity_info "No $mxl_title update available."
        return 0
    else
        # Create tmp download dir
        tmp_dir="/tmp/$latest_mxl_patch_prefix"
        rm -f -r "$tmp_dir"
        mkdir -p "$tmp_dir"
        cd "$tmp_dir" || exit 1

        ( # Download latest Median XL patch
            echo "# Downloading $mxl_title $latest_mxl_patch_version dlls ..."
            curl "$mxl_dlls_url" -o "$tmp_dir/dlls.7z"

            echo "# Downloading $mxl_title $latest_mxl_patch_version mod ..."
            curl "$mxl_mod_url" -o "$tmp_dir/mod.7z"

            echo "# Extracting $mxl_title dll files ..."
            7z e "$tmp_dir/dlls.7z" -aoa
            rm -f "$tmp_dir/dlls.7z"

            echo "# Extracting $mxl_title mod files ..."
            7z e "$tmp_dir/mod.7z" -aoa
            rm -f "$tmp_dir/mod.7z"

            echo "# Creating $latest_mxl_patch_prefix patch ..."
            mkdir -p "$patch_files_dir"
            zip -r -0 "$patch_files_dir/$latest_mxl_patch_prefix.zip" .

            echo "# $mxl_title $latest_mxl_patch_version patch successfully downloaded"

        ) | zenity --progress --text="Downloading $mxl_title $latest_mxl_patch_version" --auto-kill --pulsate

        if [ "$?" = -1 ] ; then
	        show_zenity_error "Download error"
	        return 0
        fi
        return 1
    fi
}

show_mxl_patch_gui() {
	if [ ! -d "$patch_files_dir" ]; then
		show_zenity_error "No local $mxl_title patches found!\n\nDownload latest $mxl_title patch first."
		return 1
	fi
	if [ ! -f "$d2_patch_res_file" ]; then
		show_zenity_error "$d2_patch_res_file not found!"
		exit 1
	fi
	if [ ! -f "$glide_res_file" ]; then
		zenity_error "$glide_res_file not found!"
		exit 1
	fi

    # List path files
    cd "$patch_files_dir" || exit 1
    info_text='<span font_family="'$title_font'" foreground="'$title_color'" font="'$title_size'"><b>Choose '$mxl_title' patch to install</b></span>'
    patch_file_result=$( find . -maxdepth 1 -name '*.zip' -printf "%f\n" | sort -r | rev | cut -f 2- -d '.' | rev | zenity --list --hide-header --height="$gui_height" --ok-label="Patch" --cancel-label="Cancel" --text="$info_text\n" --column="Available local patches" )

    if  [ $? = 0 ] && [ "$patch_file_result" != "" ]; then
        (
            patch_version=$(echo "$patch_file_result" | rev | cut -f 1 -d '-' | rev)

            echo "# Patching glide ..."
            install_glide

            echo "# Patching $d2_patch_res_file ..."
            unzip -o "$d2_patch_res_file" -d "$d2_binary_dir"

            echo "# Patching $patch_file_result.zip ..."
            unzip -o "$patch_files_dir/$patch_file_result.zip" -d "$d2_binary_dir"

            echo "$patch_version" > "$d2_binary_dir/$mxl_version_file_name"
            echo "# $mxl_title $patch_version successfully patched"

        ) | zenity --progress --text="Patching $mxl_title" --auto-kill --pulsate

        if [ "$?" = -1 ] ; then
            show_zenity_error "Installation error"
        fi
    fi
    return 0
}

exec_diablo() {
	if [ ! -f "$d2_binary_dir/$d2_exec" ]; then
		show_zenity_error "$d2_binary_dir/$d2_exec not found"
		return 1
	fi

    if pgrep -x "$d2_stats_exe" >/dev/null; then
	    env WINEPREFIX="$wineprefix" "$wine_default" start /unix "$d2_binary_dir/$d2_sigma_loader_exe" "$d2_args"
    else
	    env WINEPREFIX="$wineprefix" "$wine_default" start /unix "$d2_binary_dir/$d2_exec" "$d2_args"
    fi
    return 0
}

exec_d2_stats() {
    if [ ! -f "$d2_stats_res_dir/$d2_stats_exe" ]; then
        show_zenity_question "D2Stats is required. Download now?"
        if [ $? = 1 ]; then
            return 1
        fi
        (
            mkdir -p "$d2_stats_res_dir"
            cd "$d2_stats_res_dir" || exit 1
            rar_file=d2-stats.rar
            curl -Lk "$d2_stats_url" -o "$rar_file"
            unrar x "$rar_file"
            rm "$rar_file"
            echo "# D2Stats successfully downloaded"
        ) | zenity --progress --text="Downloading D2Stats" --auto-kill --pulsate
    fi
    
    if [ ! -f "$d2_binary_dir/$d2_sigma_loader_exe" ]; then
        show_zenity_question "$d2_sigma_loader_exe is required. Download now?"
        if [ $? = 1 ]; then
            return 1
        fi
        (
            curl -Lk "$d2_sigma_loader_url" -o "$d2_binary_dir/$d2_sigma_loader_exe"
            echo "# $d2_sigma_loader_exe successfully downloaded"
        ) | zenity --progress --text="Downloading $d2_sigma_loader_exe" --auto-kill --pulsate
    fi

	env WINEPREFIX="$wineprefix" "$wine_default" start /unix "$d2_stats_res_dir/$d2_stats_exe"
	
	# Workaround for disabling D2 Stats system tray
	for i in 1 2 3 4 5; do
	    sleep 1
        win_result=$(wmctrl -l | grep "Wine System Tray")
	    if [ "$win_result" != "" ]; then
	        wmctrl -c 'Wine System Tray'
	        log "Wine System Tray closed"
            break;
        fi
	done
	return 0
}

exec_d2_video_settings() {
	if [ ! -f "$d2_binary_dir/$d2_vid_test_exe" ]; then
		show_zenity_error "$d2_binary_dir/$d2_vid_test_exe not found"
		exit 1
	fi
    env WINEPREFIX="$wineprefix" "$wine_default" start /unix "$d2_binary_dir/$d2_vid_test_exe"
	return 0
}

exec_glide_settings() {
    check_glide_installation
    env WINEPREFIX="$wineprefix" "$wine_default" start /unix "$d2_binary_dir/$d2_glide_exe"
    return 0
}

exec_wine_config() {
    env WINEPREFIX="$wineprefix" "$wine_default" winecfg
}

exec_export_data() {
    if [ ! -d "$mxl_savegames_dir" ]; then
	    show_zenity_error "$mxl_savegames_dir not found"
		return 1   
    fi
	directory=$(zenity --file-selection --directory)
	if [ "$directory" != "" ]; then
		filename="$mxl_savegames_prefix-$(date "+%Y-%m-%d-%H%M").zip"
		cd "$mxl_savegames_dir" || exit 1
		zip -r -0 "$directory/$filename" .
		show_zenity_info "Data successfully exported: $directory/$filename"
	fi
	return 0
}

exec_import_data() {
	file=$(zenity --file-selection --file-filter="$mxl_savegames_prefix-*.zip")
	if [ "$file" != "" ]; then
	    mkdir -p "$mxl_savegames_dir"
		unzip -o "$file" -d "$mxl_savegames_dir"
		show_zenity_info "$mxl_savegames_dir successfully imported"
	fi
	return 0
}

(check_for_update || send_notify "New $script_id update available") &
(check_for_mxl_update || send_notify "New $mxl_title update available") &

# Main
while(true); do

    # Refresh config vars
    . "$script_config_file"
    
    check_d2_binary_dir || restart_script
    
    # Set wine default
    wine_default="$wine4"
    if [ "$wine5_enabled" = "true" ]; then
        wine_default="$wine5"
    fi
    
    # Create or remove desktop icon
	if [ "$desktop_icon" = "true" ]; then
		create_desktop_file
	else
		remove_desktop_file
	fi
	
	menu_d2launcher_info='<span font_family="'$title_font'" foreground="'$title_color'" font="'$title_size'"><b>D2LAUNCHER</b>\t'$version'</span>'
	
    # Set Median XL version status
    menu_mxl_info_text="<b>MEDIAN XL</b>\tnot installed"
	if [ -f "$d2_binary_dir/$mxl_version_file_name" ]; then
		menu_mxl_info_text="<b>MEDIAN XL</b>\t$(cat "$d2_binary_dir/$mxl_version_file_name")"
	fi
	menu_mxl_info='<span font_family="'$title_font'" foreground="'$title_color'" font="'$title_size'">'$menu_mxl_info_text'</span>'
	
	info_text="$menu_d2launcher_info\n$menu_mxl_info\n"
	
    # Set default wine version info
	wine_version_info=4
	if [ "$wine5_enabled" = "true" ]; then
	    wine_version_info=5
	fi
    
    # Menu items
	item_01="Diablo II"
	item_02="D2 Stats"
	item_03="Download $mxl_title"
	item_04="Install $mxl_title"
	item_05="Glide Settings"
	item_06="D2 Video Settings"
	item_07="Wine $wine_version_info Settings"
	item_08="Import Savegames"
	item_09="Export Savegames"
	item_10="Configuration"
	item_11="Update"
	item_12="Help"

    # Show menu
    result=$(zenity --list --radiolist --height="$gui_height" --ok-label="Ok" --cancel-label="Exit" --text="$info_text" --hide-header --column="" --column="" TRUE "$item_01" FALSE "$item_02" FALSE "$item_03" FALSE "$item_04" FALSE "$item_05" FALSE "$item_06" FALSE "$item_07" FALSE "$item_08" FALSE "$item_09" FALSE "$item_10" FALSE "$item_11" FALSE "$item_12")

    # If user exit
    if [ $? = 1 ]; then
        break; exit 0;
    fi
    if [ "$result" = "$item_01" ]; then
        check_wine_standalone || continue
        check_glide_installation || continue
        exec_diablo || continue
        break; exit 0;
    fi
    if [ "$result" = "$item_02" ]; then
        check_wine_standalone || continue
        exec_d2_stats || continue
    fi
    if [ "$result" = "$item_03" ]; then
        show_mxl_download_gui || continue
    fi
    if [ "$result" = "$item_04" ]; then
        show_mxl_patch_gui || continue
    fi
    if [ "$result" = "$item_05" ]; then
        check_wine_standalone || continue
        check_glide_installation || continue
        exec_glide_settings || continue
    fi
    if [ "$result" = "$item_06" ]; then
        check_wine_standalone || continue
        exec_d2_video_settings || continue
    fi
    if [ "$result" = "$item_07" ]; then
        check_wine_standalone || continue
        exec_wine_config || continue
    fi
    if [ "$result" = "$item_08" ]; then
        exec_import_data || continue
    fi
    if [ "$result" = "$item_09" ]; then
        exec_export_data || continue
    fi
   if [ "$result" = "$item_10" ]; then
        show_edit_config || restart_script
    fi
    if [ "$result" = "$item_11" ]; then
        show_update_gui || restart_script
    fi
    if [ "$result" = "$item_12" ]; then
        show_help_gui || continue
    fi
done
